如何形象化的理解反码、补码？

首先明确一点正数的二进制表示最高位一定是0，负数的二进制表示最高位一定是1

其次正数的源码，反码，补码都一样

重点在于如何理解负数的反码补码：

一个字节8位可以表示从-128~127的十进制数  一共256个数（包括0）



二进制从  		00000000~01111111~10000000~11111111

对应的十进制	0		~127	 ~-128	  ~-1

注意二进制是用补码的形式表示的，在计算机内也是用补码存储的



为什么反码+1 就变成补码了呢？

补码的出现是为了方便计算减法，用计算机只会的加法来实现减法的功能

比如十进制23的源码是00010111 反码11101000 补码11101001

如果想要减去23 则可以计算+（-23）这里的补码11101001就可以看成是-23

有人会简单的把最高位的1看成-号，这样得出的11101001就是-105，其实不能这样算



可以形象化的把一个字节想成一个可以容纳256升的水池，水池里有23升的水

而23的反码= 11111111 - 00010111 = 11101000

上面的11111111可以想象成水池少一升水的样子也就是255升

那么反码+1 = 补码 就是水池中除了23升水剩余的空间

现在非常形象了：补码就是剩余空间



现在如果被减数比23大  

那么被减数表示的空间加上剩余空间（补码）肯定会溢出到下一个池子，

那溢出多少结果就是多少，

这也和进位溢出的原理一样，之前的池子里的水就不管它了

如果被减数比23小

那么被减数表示的空间加上剩余空间肯定不够填满这个池子的，

这时字节中存的肯定是最高位为1的负数，也是以补码来表示的

结果是还差的那些容量的补码，而补码是什么来?

补码是正数的负数啊，所以剩余容量的负数就是结果了



重要的两点：

补码可以形象化的看成是剩余空间

补码可以算数化的看成是正数的负数

